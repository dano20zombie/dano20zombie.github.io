<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tecnología on El blog de dano20zombie</title>
    <link>https://dano20zombie.github.io/es/categories/tecnolog%C3%ADa/</link>
    <description>Recent content in Tecnología on El blog de dano20zombie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Sat, 17 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://dano20zombie.github.io/es/categories/tecnolog%C3%ADa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CppOnionBridge: Innovación en el Acceso Anónimo a Internet</title>
      <link>https://dano20zombie.github.io/es/posts/cpponionbridge/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://dano20zombie.github.io/es/posts/cpponionbridge/</guid>
      <description>Descargo de responsabilidad Este post y el proyecto CppOnionBridge tienen como objetivo promover la privacidad y la seguridad en línea. El uso de herramientas para navegar anónimamente por Internet siempre debe realizarse cumpliendo con las leyes y regulaciones locales. Recordamos que la responsabilidad por el uso de dichas herramientas recae en el usuario final. Este contenido se proporciona &amp;ldquo;tal cual&amp;rdquo;, sin ningún tipo de garantía sobre su precisión o puntualidad.</description>
      <content>&lt;h2 id=&#34;descargo-de-responsabilidad&#34;&gt;Descargo de responsabilidad&lt;/h2&gt;
&lt;p&gt;Este post y el proyecto CppOnionBridge tienen como objetivo promover la privacidad y la seguridad en línea. El uso de herramientas para navegar anónimamente por Internet siempre debe realizarse cumpliendo con las leyes y regulaciones locales. Recordamos que la responsabilidad por el uso de dichas herramientas recae en el usuario final. Este contenido se proporciona &amp;ldquo;tal cual&amp;rdquo;, sin ningún tipo de garantía sobre su precisión o puntualidad.&lt;/p&gt;
&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En el contexto actual, donde la privacidad en línea está constantemente amenazada, &lt;strong&gt;CppOnionBridge&lt;/strong&gt; se presenta como una solución de vanguardia para garantizar un acceso anónimo y seguro a Internet. Este proyecto, desarrollado con un enfoque en entornos Windows, permite una navegación segura a sitios onion y APIs a través de la red Tor, utilizando el protocolo SOCKS5.&lt;/p&gt;
&lt;h2 id=&#34;visión&#34;&gt;Visión&lt;/h2&gt;
&lt;p&gt;La visión detrás de &lt;strong&gt;CppOnionBridge&lt;/strong&gt; es clara: proporcionar una herramienta que no solo protege la identidad en línea de los usuarios, sino que también hace accesible el poder de la red Tor a desarrolladores y usuarios finales con un esfuerzo técnico mínimo. Este proyecto encapsula la complejidad de las conexiones SSL/TLS y las solicitudes HTTP(S) a través de Tor, permitiendo centrarse en la funcionalidad de la aplicación.&lt;/p&gt;
&lt;h2 id=&#34;características-y-beneficios&#34;&gt;Características y Beneficios&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facilidad de Integración&lt;/strong&gt;: Diseñado para integrarse fácilmente en aplicaciones C++, &lt;strong&gt;CppOnionBridge&lt;/strong&gt; reduce la barrera de entrada para el desarrollo de aplicaciones seguras.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencias Mínimas&lt;/strong&gt;: Con solo dependencias en Boost para operaciones de red y sistema, y OpenSSL para conexiones cifradas, se mantiene ligero y agnóstico al entorno de desarrollo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibilidad con SOCKS5&lt;/strong&gt;: Asegura una interacción fluida y segura con la red Tor, abriendo el camino para una amplia gama de aplicaciones que requieren anonimato y seguridad.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;qué-es-socks5&#34;&gt;¿Qué es SOCKS5?&lt;/h2&gt;
&lt;p&gt;SOCKS es un protocolo de Internet que intercambia paquetes de red entre un cliente y un servidor a través de un servidor proxy. SOCKS5 proporciona opcionalmente autenticación, para que solo los usuarios autorizados puedan acceder a un servidor.&lt;/p&gt;
&lt;h2 id=&#34;por-qué-socks5&#34;&gt;¿Por qué SOCKS5?&lt;/h2&gt;
&lt;p&gt;El protocolo SOCKS5 fue elegido por su flexibilidad y seguridad. Su arquitectura cliente-servidor permite encapsular las solicitudes HTTP(S) y las conexiones SSL/TLS a través de Tor, garantizando una interacción segura y anónima con la red. Además, su compatibilidad con una amplia gama de aplicaciones lo convierte en una elección ideal para garantizar el anonimato y la seguridad en línea. (&lt;a href=&#34;https://es.wikipedia.org/wiki/SOCKS&#34;&gt;Wikipedia&lt;/a&gt;)
El servidor SOCKS5 actúa como un proxy entre tú y el host final, enviando paquetes desde tu computadora hacia el otro lado de la conexión, y viceversa.
TOR ya nos proporciona una interfaz SOCKS5, que se basa en el puerto local predeterminado 9050, pero en este ejemplo, utilizaremos el puerto 9150.&lt;/p&gt;
&lt;h2 id=&#34;cómo-funciona&#34;&gt;Cómo Funciona&lt;/h2&gt;
&lt;p&gt;CppOnionBridge depende de dos bibliotecas externas: Boost y OpenSSL, así que comencemos incluyéndolas en nuestro proyecto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/asio.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/beast.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/beast/http.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/beast/ssl.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/beast/version.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/asio/connect.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/asio/ip/tcp.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/asio/ssl/error.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;boost/asio/ssl/stream.hpp&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma comment(lib, &amp;#34;libcrypto64MD.lib&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma comment(lib, &amp;#34;libssl64MD.lib&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;Windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Definizioni di namespace per semplificare il codice
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; beast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;beast;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; http &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; beast&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;http;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; ssl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ssl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; asio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; error &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;error;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; tcp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;tcp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; host &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bible4u2lvhacg4b3to2e2veqpwmrc2c3tjf2wuuqiz332vlwmr4xbad.onion&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Bible4u
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/en/about&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// About Page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Habiendo hecho eso, como nuestro primer paso real, necesitamos crear un socket y conectarnos a la dirección localhost, con nuestro puerto especificado (127.0.0.1:9150):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;io_context io_context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;socket socket(io_context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tcp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;resolver resolver(io_context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tcp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;socket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;gt;*&lt;/span&gt; ssl_stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nullptr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; endpoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resolver.resolve(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9150&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;connect(socket, endpoints);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connessione stabilita con successo.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Una vez conectados al socket, lo primero que debemos hacer es enviar el saludo inicial al servidor, para comunicar que queremos utilizar el protocolo SOCKS5.
Para obtener información detallada sobre SOCKS5, puedes consultar &lt;a href=&#34;https://tools.ietf.org/html/rfc1928&#34;&gt;IETF.ORG&lt;/a&gt;
Es importante tener en cuenta que el saludo inicial consta de tres bytes individuales en secuencia:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;VERSIÓN DEL SOCKET&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;NÚMERO DE MÉTODOS DE AUTENTICACIÓN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;MÉTODOS DE AUTENTICACIÓN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para el primer byte, tenemos 0x5, que es la versión del socket (SOCKS5), mientras que para el segundo byte tenemos el número de métodos de autenticación admitidos por el cliente, donde en este caso TOR solo acepta uno, que es 0x1, mientras que el tercer byte especifica el método de autenticación elegido, que en este caso será 0x0, lo que significa ninguna autenticación.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Send the SOCKS5 greeting.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;socket.send(boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;buffer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x05\x01\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este punto, solo necesitamos leer la respuesta devuelta por el proxy para saber si todo salió bien o no, leyendo el segundo byte de la respuesta, que siempre debería ser 0x0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Receive the response to the SOCKS5 greeting.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; response[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;size_t length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket.receive(boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;buffer(response, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Check the response to the SOCKS5 greeting.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (length &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; response[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x00&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se todo salió bien, lo único que nos queda es decirle al servidor proxy que se conecte a un host específico para que podamos enviar y recibir solicitudes.
Procederemos de la misma manera que con el saludo inicial pero con bytes diferentes. En este caso, tenemos cuatro bytes iniciales, el host especificado, y uno o dos bytes finales para especificar el puerto (HTTP/HTTPS - 80/443).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;VERSIÓN DEL SOCKET&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;COMANDO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;RESERVADO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;TIPO DE DIRECCIÓN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;LONGITUD DE LA DIRECCIÓN (SOLO SI ES DE TIPO DOMINIO)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;DIRECCIÓN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;PUERTO&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Como primer byte, tenemos 0x5, que es la versión del socket (SOCK-5), como segundo byte, tenemos el comando que queremos ejecutar, donde en este caso será 0x1, lo que significa conexión, como tercer byte tenemos un byte reservado, que siempre debe ser 0x0, y como cuarto byte tenemos el tipo de dirección que estamos especificando, donde en este caso será 0x3, lo que significa una dirección de dominio, pero también podría ser 0x1 para conectarse a un IPv4, o 0x4 para conectarse a un IPv6.
Después de estos bytes, es necesario especificar la longitud del dominio al que conectarse, en el quinto byte, e inmediatamente después especificar el host a través del dominio, y como último uno o dos bytes tenemos el puerto al que conectarse, donde los más comunes son 80 (0x50) para HTTP, y 443 (0x01 0xBB) para HTTPS.
Todos los comandos disponibles son visibles y documentados en el sitio &lt;a href=&#34;https://tools.ietf.org/html/rfc1928&#34;&gt;IETF.ORG&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;byte&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; byte[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;memset(request, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(request));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sprintf(request, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x05\x01\x00\x03&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\xBB&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;static_cast&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(host.size()), host.c_str());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Send the request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;socket.send(boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;buffer(request, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; host.size()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;[] request;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finalmente, solo necesitamos verificar como siempre la respuesta del servidor, donde en este caso debería tener una longitud de diez bytes, de los cuales leeremos exclusivamente el segundo, ya que devuelve el estado de nuestra solicitud.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Receive the response to the SOCKS5 connection request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length_response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket.receive(boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;asio&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;buffer(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (length_response &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x00&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x1: General failure of the socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x2: Connection&amp;#39;s rule not allowed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x3: Network not available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x4: Host not available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x5: Connection refused (SOCK5 not available)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x6: Timeout
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x7: Command not supported
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 0x8: Address type not supported
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Algunos dominios onion pueden no aceptar conexiones entrantes a través de SOCK5, en este caso, si no se es el propietario del dominio, no hay mucho que se pueda hacer al respecto.
De todos modos, una vez llegados a este punto, podemos proceder con el envío de la solicitud real.
Si se realiza una solicitud HTTPS, es necesario enviar la solicitud encriptada, a través de un flujo SSL con el correspondiente handshake, de lo contrario, el servidor no podrá interpretarla.
Por otro lado, esto debería evitarse si se realiza una solicitud HTTP, donde en este caso el servidor espera una solicitud clara, por lo tanto, no encriptada.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create the SSL stream for the new connection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ssl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;context ctx(ssl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sslv23);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssl_stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ssl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;stream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tcp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;socket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;(socket, ctx);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Perform the SSL/TLS handshake
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ssl_stream&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;handshake(ssl&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;stream_base&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;client);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Después de realizar un flujo SSL y su handshake (SI ES NECESARIO PARA HTTPS), procedemos con el envío de la solicitud real:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Prepare the HTTP request
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;request&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string_body&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; req(http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;verb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;get, target, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Si specifica il metodo (GET/POST/PUT), l&amp;#39;host e la versione dell&amp;#39;HTTP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;req.set(http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;field&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;host, host); &lt;span style=&#34;color:#75715e&#34;&gt;// Si specifica l&amp;#39;host
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;req.set(http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;field&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;user_agent, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mozilla/5.0 (Windows NT 6.1; rv:31.0) Gecko/20100101 Firefox/31.0&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Si specifica l&amp;#39;User-Agent (Browser)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;req.set(http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;field&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;connection, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keep-alive&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Si specifica la connessione come persistente (Opzionale)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Send the HTTP request over the SSL connection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;write(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ssl_stream, req);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este punto, todo lo que queda es finalmente recibir la respuesta a nuestra solicitud junto con el código de salida para conocer el resultado de la solicitud.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Receive the HTTP response
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;beast&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;flat_buffer buffer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;dynamic_body&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;read(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ssl_stream, buffer, res); &lt;span style=&#34;color:#75715e&#34;&gt;//Otteniamo la risposta e salviamola in res
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string req_response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; beast&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;buffers_to_string(res.body().data()); &lt;span style=&#34;color:#75715e&#34;&gt;// Convertiamo la risposta in una stringa
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (res.result_int() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 200 = HTTP_OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Una vez que hayamos terminado con nuestra solicitud, necesitamos cerrar la conexión con el servidor proxy y liberar la memoria asignada para el flujo SSL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boost&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;system&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;error_code ec;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssl_stream&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;shutdown(ec); &lt;span style=&#34;color:#75715e&#34;&gt;// Spegniamo lo stream SSL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt; ssl_stream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socket.close(); &lt;span style=&#34;color:#75715e&#34;&gt;// Chiudiamo il socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y aquí hemos realizado con éxito nuestra solicitud y obtenido la respuesta.&lt;/p&gt;
&lt;h2 id=&#34;guía-de-instalación&#34;&gt;Guía de Instalación&lt;/h2&gt;
&lt;p&gt;La instalación de &lt;strong&gt;CppOnionBridge&lt;/strong&gt; requiere algunos pasos preliminares, que incluyen configurar Boost y OpenSSL en tu entorno de desarrollo, así como tener una instancia activa del servicio Tor configurada para operar a través del puerto 9150.&lt;/p&gt;
&lt;h3 id=&#34;pasos-de-instalación&#34;&gt;Pasos de Instalación:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Asegúrate de que Boost y OpenSSL estén instalados y configurados correctamente en el sistema.&lt;/li&gt;
&lt;li&gt;Verifica que el servicio Tor esté activo y configurado para conectarse a través del puerto 9150.&lt;/li&gt;
&lt;li&gt;Clona el repositorio de GitHub de &lt;strong&gt;CppOnionBridge&lt;/strong&gt; e inclúyelo en tu proyecto.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;contribuir-al-proyecto&#34;&gt;Contribuir al Proyecto&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CppOnionBridge&lt;/strong&gt; es un proyecto de código abierto, y la participación de la comunidad es esencial para su desarrollo continuo y mejora. Si estás interesado en contribuir, ya sea a través de código, documentación o pruebas, visita el &lt;a href=&#34;https://github.com/dano20zombie/CppOnionBridge&#34;&gt;repositorio de GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CppOnionBridge&lt;/strong&gt; representa un paso significativo hacia la democratización del acceso seguro y anónimo a Internet. Con su facilidad de integración, dependencias mínimas y compatibilidad con la red Tor, abre nuevas fronteras para el desarrollo de aplicaciones que respeten la privacidad y seguridad de los usuarios.&lt;/p&gt;
&lt;p&gt;Para más detalles, referencias y guías de instalación, consulta la &lt;a href=&#34;https://github.com/dano20zombie/CppOnionBridge&#34;&gt;documentación completa&lt;/a&gt; disponible en el repositorio de GitHub.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
